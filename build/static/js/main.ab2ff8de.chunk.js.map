{"version":3,"sources":["utils/noteHelpers.js","context/LanguageContext.js","components/List.js","components/Editor.js","context/NoteContext.js","context/LanguageButtons.js","components/Notes.js","App.js","index.js"],"names":["archive","getNotes","notes","localStorage","getItem","JSON","parse","setItem","stringify","deleteNote","id","indexToDelete","findIndex","note","splice","jsonNoteArray","deleteFromArchive","LanguageContext","React","createContext","getLanguageFromString","sv","en","Provider","children","initLangCode","useState","langCode","setLangCode","lang","value","List","selectedNote","setSelectedNote","useContext","length","ListGroup","as","map","index","Item","active","onClick","onSelectNote","title","Form","refreshList","isArchived","console","log","setTitle","body","setBody","status","setStatus","variant","setVariant","useEffect","setTimeout","Group","controlId","Label","Control","onChange","e","target","Button","preventDefault","indexToUpdate","updateNote","newNote","Date","now","push","createNote","style","styles","button","class","unArchiveNote","Alert","className","marginRight","NoteContext","setNotes","notesData","LanguageButtons","size","Notes","undefined","showArchive","setShowArchive","archivedNotes","setArchivedNotes","Container","Jumbotron","fluid","Row","Col","sm","block","App","NoteWrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab2ff8de.chunk.js","sourcesContent":["function initializeNotes() {\r\n  // sets localstorage for the first time\r\n  localStorage.setItem('notes', JSON.stringify([]))\r\n  // returns an array\r\n  return []\r\n}\r\n\r\nconst archive = []\r\n\r\nexport function getNotes() {\r\n  let notes = localStorage.getItem('notes')\r\n  if (!notes) {\r\n    return initializeNotes()\r\n  }\r\n  const parsedNotes = JSON.parse(notes)\r\n  return parsedNotes\r\n}\r\n\r\nexport function createNote(title, body) {\r\n  const notes = getNotes()\r\n  const newNote = {id: Date.now(), title, body}\r\n  notes.push(newNote)\r\n  console.log('about to save', notes)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n\r\nexport function getNote(id) {\r\n  const notes = getNotes()\r\n  return notes.find((note) => note.id === id)\r\n}\r\n\r\nexport function updateNote(id, title, body) {\r\n  const notes = getNotes()\r\n  const indexToUpdate = notes.findIndex((note) => note.id === id)\r\n  const note = {\r\n    id,\r\n    title,\r\n    body,\r\n  }\r\n  // removes old note\r\n  notes.splice(indexToUpdate, 1)\r\n  // adds new note to start\r\n  notes.splice(0, 0, note)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n\r\nexport function deleteNote(id) {\r\n  const notes = getNotes()\r\n  const indexToDelete = notes.findIndex((note) => note.id === id)\r\n  if (indexToDelete >= 0) notes.splice(indexToDelete, 1)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n\r\nexport function deleteFromArchive(id) {\r\n  const notes = getNotes()\r\n  const indexToDelete = archive.findIndex((note) => note.id === id)\r\n  if (indexToDelete >= 0) archive.splice(indexToDelete, 1)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n\r\nexport function archiveNote(note) {\r\n  // add to the archive\r\n  archive.push(note)\r\n  // remove the note from notes\r\n  deleteNote(note.id)\r\n}\r\n\r\nexport function unArchiveNote(note) {\r\n  const notes = getNotes()\r\n  // add to the notes\r\n  notes.push(note)\r\n  // remove the note from archive\r\n  deleteFromArchive(note.id)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n\r\nexport function getArchive() {\r\n  return archive\r\n}\r\n","import React, {useState} from 'react'\r\nimport en from './i18n/en.json'\r\nimport sv from './i18n/sv.json'\r\n\r\nexport const LanguageContext = React.createContext(null)\r\n\r\nconst getLanguageFromString = {\r\n  sv,\r\n  en,\r\n}\r\n\r\nexport default function Provider({children, initLangCode}) {\r\n  const [langCode, setLangCode] = useState(initLangCode)\r\n\r\n  const lang = getLanguageFromString[langCode]\r\n\r\n  return <LanguageContext.Provider value={{lang, setLangCode}}>{children}</LanguageContext.Provider>\r\n}\r\n","import React, {useContext} from 'react'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport {LanguageContext} from '../context/LanguageContext'\r\n\r\nexport default function List({selectedNote, setSelectedNote, notes}) {\r\n  const onSelectNote = (note) => {\r\n    setSelectedNote(note)\r\n  }\r\n\r\n  const {lang} = useContext(LanguageContext)\r\n\r\n  if (!notes.length) return lang['noNotesFound']\r\n\r\n  return (\r\n    <ListGroup as=\"ul\">\r\n      {notes.map((note, index) => (\r\n        <ListGroup.Item\r\n          active={selectedNote ? note.id === selectedNote.id : false}\r\n          onClick={() => onSelectNote(note)}\r\n          as=\"li\"\r\n        >\r\n          {note.title}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n","import React, {useState, useEffect, useContext} from 'react'\r\nimport BSForm from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {\r\n  createNote,\r\n  getNotes,\r\n  updateNote,\r\n  deleteNote,\r\n  deleteFromArchive,\r\n  archiveNote,\r\n  unArchiveNote,\r\n} from '../utils/noteHelpers'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport {LanguageContext} from '../context/LanguageContext'\r\n\r\nconst STATUS_INITIAL_VALUE = ''\r\n\r\nexport default function Form({selectedNote, setSelectedNote, refreshList, isArchived}) {\r\n  console.log(selectedNote)\r\n  const [title, setTitle] = useState('')\r\n  const [body, setBody] = useState('')\r\n  const [status, setStatus] = useState(STATUS_INITIAL_VALUE)\r\n  const [variant, setVariant] = useState('')\r\n  const {lang} = useContext(LanguageContext)\r\n\r\n  //if (selectedNote) setTitle(selectedNote.title)\r\n\r\n  useEffect(() => {\r\n    if (selectedNote) return setTitle(selectedNote.title)\r\n    setTitle('') && setBody(selectedNote.body)\r\n    setBody('')\r\n  }, [selectedNote])\r\n\r\n  useEffect(() => {\r\n    if (selectedNote) return setBody(selectedNote.body)\r\n    setBody('')\r\n  }, [selectedNote])\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => setStatus(STATUS_INITIAL_VALUE), 3000)\r\n  }, [status])\r\n\r\n  const onChangeTitle = (e) => setTitle(e.target.value)\r\n  const onChangeBody = (e) => setBody(e.target.value)\r\n  const onSave = (e) => {\r\n    e.preventDefault()\r\n    setTitle('')\r\n    setBody('')\r\n    setStatus(lang['saved'])\r\n    setVariant('success')\r\n    if (selectedNote) {\r\n      updateNote(selectedNote.id, title, body)\r\n      return refreshList()\r\n    }\r\n\r\n    console.log('Saving new note:', title)\r\n    createNote(title, body)\r\n    refreshList()\r\n    console.log(getNotes())\r\n  }\r\n\r\n  const onDelete = (e) => {\r\n    e.preventDefault()\r\n    const {id} = selectedNote\r\n    deleteNote(id)\r\n    deleteFromArchive(id)\r\n    refreshList()\r\n    setTitle('')\r\n    setBody('')\r\n    setStatus(lang['deleted'])\r\n    setVariant('danger')\r\n  }\r\n\r\n  const handleArchive = (e) => {\r\n    e.preventDefault()\r\n    if (isArchived) {\r\n      unArchiveNote(selectedNote)\r\n    } else {\r\n      archiveNote(selectedNote)\r\n    }\r\n    refreshList()\r\n    setTitle('')\r\n  }\r\n\r\n  return (\r\n    <BSForm>\r\n      <BSForm.Group controlId=\"formGroupTitle\">\r\n        <BSForm.Label>{lang['title']}</BSForm.Label>\r\n        <BSForm.Control value={title} onChange={onChangeTitle} />\r\n      </BSForm.Group>\r\n      <BSForm.Group controlId=\"formGroupNote\">\r\n        <BSForm.Label>{lang['body']}</BSForm.Label>\r\n        <BSForm.Control as=\"textarea\" value={body} onChange={onChangeBody} />\r\n      </BSForm.Group>\r\n      <Button onClick={onSave} variant=\"success\" style={styles.button}>\r\n        {lang['save']}\r\n      </Button>\r\n      {selectedNote && (\r\n        <Button onClick={onDelete} variant=\"danger\" style={styles.button}>\r\n          {lang['delete']} <i class=\"fas fa-trash-alt\"></i>\r\n        </Button>\r\n      )}\r\n      {selectedNote && (\r\n        <Button onClick={handleArchive} variant=\"secondary\" style={styles.button}>\r\n          {isArchived ? lang['unarchive'] : lang['archive']}\r\n        </Button>\r\n      )}\r\n      {status && (\r\n        <Alert className=\"mt-2\" variant={variant}>\r\n          {status}\r\n        </Alert>\r\n      )}\r\n    </BSForm>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  button: {marginRight: 10},\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport {getNotes} from '../utils/noteHelpers'\r\n\r\nexport const NoteContext = React.createContext(null)\r\n\r\nexport default function Provider({children}) {\r\n  const [notes, setNotes] = useState([])\r\n\r\n  useEffect(() => {\r\n    const notesData = getNotes()\r\n    setNotes(notesData)\r\n  }, [])\r\n\r\n  return <NoteContext.Provider value={{notes, setNotes}}>{children}</NoteContext.Provider>\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {LanguageContext} from './LanguageContext'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport default function LanguageButtons({children}) {\r\n  const {setLangCode} = useContext(LanguageContext)\r\n\r\n  return (\r\n    <div>\r\n      <Button size=\"sm\" className=\"mb-4 mr-2\" onClick={() => setLangCode('sv')}>\r\n        SE\r\n      </Button>\r\n      <Button size=\"sm\" className=\"mb-4\" onClick={() => setLangCode('en')}>\r\n        EN\r\n      </Button>\r\n      <div>{children}</div>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useState, useContext} from 'react'\r\nimport {getNotes, getArchive} from '../utils/noteHelpers'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport List from './List'\r\nimport Form from './Editor'\r\nimport {NoteContext} from '../context/NoteContext'\r\nimport LanguageButtons from '../context/LanguageButtons'\r\nimport {LanguageContext} from '../context/LanguageContext'\r\n\r\nexport default function Notes() {\r\n  const [selectedNote, setSelectedNote] = useState(undefined)\r\n  const [showArchive, setShowArchive] = useState(false)\r\n  const {notes, setNotes} = useContext(NoteContext)\r\n  const [archivedNotes, setArchivedNotes] = useState([])\r\n  const {lang} = useContext(LanguageContext)\r\n\r\n  const refreshList = () => {\r\n    setSelectedNote(undefined)\r\n    const notes = getNotes()\r\n    const archivedNotes = getArchive()\r\n    setNotes([...notes])\r\n    setArchivedNotes([...archivedNotes])\r\n  }\r\n\r\n  const onClickNewNote = () => setSelectedNote(undefined)\r\n\r\n  return (\r\n    <Container>\r\n      <Jumbotron fluid>\r\n        <Container>\r\n          <h1>Notes by Angelica</h1>\r\n          <p>React app!</p>\r\n        </Container>\r\n      </Jumbotron>\r\n      <LanguageButtons />\r\n      <Row>\r\n        <Col sm={4}>\r\n          <>\r\n            <Button onClick={onClickNewNote} variant=\"dark\" size=\"md\" block className=\"mb-4\">\r\n              {lang['newNote']}\r\n            </Button>\r\n          </>\r\n          <List\r\n            notes={showArchive ? archivedNotes : notes}\r\n            selectedNote={selectedNote}\r\n            setSelectedNote={setSelectedNote}\r\n          />\r\n          <Button\r\n            onClick={() => setShowArchive(!showArchive)}\r\n            variant={showArchive ? 'primary' : 'secondary'}\r\n            size=\"md\"\r\n            block\r\n            className=\"mt-4\"\r\n          >\r\n            {showArchive ? <i class=\"fas fa-sticky-note\"></i> : <i class=\"fas fa-inbox\"></i>} &nbsp;\r\n            {showArchive ? lang['notes'] : lang['archive']}\r\n          </Button>\r\n        </Col>\r\n        <Col>\r\n          <Form isArchived={showArchive} refreshList={refreshList} selectedNote={selectedNote} />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n","import React from 'react'\nimport Notes from './components/Notes'\nimport NotesProvider from './context/NoteContext'\nimport LanguageProvider from './context/LanguageContext'\n\nexport default function App() {\n  return (\n    <NotesProvider>\n      <LanguageProvider initLangCode=\"en\">\n        <NoteWrapper />\n      </LanguageProvider>\n    </NotesProvider>\n  )\n}\n\nfunction NoteWrapper() {\n  return <Notes />\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}