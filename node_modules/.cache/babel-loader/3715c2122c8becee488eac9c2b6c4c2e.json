{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Angelica\\\\Desktop\\\\react\\\\notes\\\\src\\\\examples\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport BSForm from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { createNote, getNotes, updateNote, deleteNote } from '../utils/noteHelpers';\nimport Alert from 'react-bootstrap/Alert';\n/*\r\nRequirements\r\n1. (DONE) write text in the field and store it as a new note\r\n2. (DONE) click on a note and displat the taxt in the fields.\r\n3. (DONE) edithe field filled with text from a selected note\r\n4. (DONE) Clicking save while on a selected note will update that selected note - how do ew make <List /> rerender when clicking save?\r\n*/\n\nexport default function Form({\n  selectedNote,\n  setSelectedNote,\n  refreshList\n}) {\n  _s();\n\n  console.log(selectedNote);\n  const [title, setTitle] = useState(''); //if (selectedNote) setTitle(selectedNote.title)\n\n  useEffect(() => {\n    if (selectedNote) return setTitle(selectedNote.title);\n    setTitle('');\n  }, [selectedNote]);\n\n  const onChangeTitle = e => setTitle(e.target.value);\n\n  const onSave = e => {\n    e.preventDefault();\n    setTitle('')( /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"success\",\n      children: \"Saved!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 18\n    }, this));\n\n    if (selectedNote) {\n      updateNote(selectedNote.id, title);\n      return refreshList();\n    }\n\n    console.log('Saving new note:', title);\n    createNote(title, '');\n    refreshList();\n    console.log(getNotes());\n  };\n\n  const onDelete = e => {\n    e.preventDefault();\n    const {\n      id\n    } = selectedNote;\n    deleteNote(id);\n    refreshList();\n    setTitle('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(BSForm, {\n    children: [/*#__PURE__*/_jsxDEV(BSForm.Group, {\n      controlId: \"formGroupTitle\",\n      children: [/*#__PURE__*/_jsxDEV(BSForm.Label, {\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BSForm.Control, {\n        //value={selectedNote ? selectedNote.title : title} onChange={onChangeTitle}\n        value: title,\n        onChange: onChangeTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onSave,\n      variant: \"secondary\",\n      style: {\n        marginRight: '5px'\n      },\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), selectedNote && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onDelete,\n      variant: \"danger\",\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n/*\r\nGör en likadan för body\r\n*/\n\n_s(Form, \"FgwV7fs/MKl3JfXZzkj+8ZExyxs=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/Angelica/Desktop/react/notes/src/examples/Form.js"],"names":["React","useState","useEffect","BSForm","Button","createNote","getNotes","updateNote","deleteNote","Alert","Form","selectedNote","setSelectedNote","refreshList","console","log","title","setTitle","onChangeTitle","e","target","value","onSave","preventDefault","id","onDelete","marginRight"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAAQC,UAAR,EAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,UAA1C,QAA2D,sBAA3D;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,IAAT,CAAc;AAACC,EAAAA,YAAD;AAAeC,EAAAA,eAAf;AAAgCC,EAAAA;AAAhC,CAAd,EAA4D;AAAA;;AACzEC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC,CAFyE,CAIzE;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,YAAJ,EAAkB,OAAOM,QAAQ,CAACN,YAAY,CAACK,KAAd,CAAf;AAClBC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAHQ,EAGN,CAACN,YAAD,CAHM,CAAT;;AAKA,QAAMO,aAAa,GAAIC,CAAD,IAAOF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAArC;;AACA,QAAMC,MAAM,GAAIH,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACI,cAAF;AACAN,IAAAA,QAAQ,CAAC,EAAD,CAAR,eAAa,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAb;;AACA,QAAIN,YAAJ,EAAkB;AAChBJ,MAAAA,UAAU,CAACI,YAAY,CAACa,EAAd,EAAkBR,KAAlB,CAAV;AACA,aAAOH,WAAW,EAAlB;AACD;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,KAAhC;AACAX,IAAAA,UAAU,CAACW,KAAD,EAAQ,EAAR,CAAV;AACAH,IAAAA,WAAW;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAQ,EAApB;AACD,GAZD;;AAcA,QAAMmB,QAAQ,GAAIN,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACI,cAAF;AACA,UAAM;AAACC,MAAAA;AAAD,QAAOb,YAAb;AACAH,IAAAA,UAAU,CAACgB,EAAD,CAAV;AACAX,IAAAA,WAAW;AACXI,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAND;;AAQA,sBACE,QAAC,MAAD;AAAA,4BACE,QAAC,MAAD,CAAQ,KAAR;AAAc,MAAA,SAAS,EAAC,gBAAxB;AAAA,8BACE,QAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD,CAAQ,OAAR;AAAgB;AACd,QAAA,KAAK,EAAED,KADT;AAEE,QAAA,QAAQ,EAAEE;AAFZ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEI,MAAjB;AAAyB,MAAA,OAAO,EAAC,WAAjC;AAA6C,MAAA,KAAK,EAAE;AAACI,QAAAA,WAAW,EAAE;AAAd,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,EAWGf,YAAY,iBACX,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEc,QAAjB;AAA2B,MAAA,OAAO,EAAC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;AAED;AACA;AACA;;GAzDwBf,I;;KAAAA,I","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport BSForm from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {createNote, getNotes, updateNote, deleteNote} from '../utils/noteHelpers'\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\n/*\r\nRequirements\r\n1. (DONE) write text in the field and store it as a new note\r\n2. (DONE) click on a note and displat the taxt in the fields.\r\n3. (DONE) edithe field filled with text from a selected note\r\n4. (DONE) Clicking save while on a selected note will update that selected note - how do ew make <List /> rerender when clicking save?\r\n*/\r\n\r\nexport default function Form({selectedNote, setSelectedNote, refreshList}) {\r\n  console.log(selectedNote)\r\n  const [title, setTitle] = useState('')\r\n\r\n  //if (selectedNote) setTitle(selectedNote.title)\r\n\r\n  useEffect(() => {\r\n    if (selectedNote) return setTitle(selectedNote.title)\r\n    setTitle('')\r\n  }, [selectedNote])\r\n\r\n  const onChangeTitle = (e) => setTitle(e.target.value)\r\n  const onSave = (e) => {\r\n    e.preventDefault()\r\n    setTitle('')(<Alert variant=\"success\">Saved!</Alert>)\r\n    if (selectedNote) {\r\n      updateNote(selectedNote.id, title)\r\n      return refreshList()\r\n    }\r\n\r\n    console.log('Saving new note:', title)\r\n    createNote(title, '')\r\n    refreshList()\r\n    console.log(getNotes())\r\n  }\r\n\r\n  const onDelete = (e) => {\r\n    e.preventDefault()\r\n    const {id} = selectedNote\r\n    deleteNote(id)\r\n    refreshList()\r\n    setTitle('')\r\n  }\r\n\r\n  return (\r\n    <BSForm>\r\n      <BSForm.Group controlId=\"formGroupTitle\">\r\n        <BSForm.Label>Title</BSForm.Label>\r\n        <BSForm.Control //value={selectedNote ? selectedNote.title : title} onChange={onChangeTitle}\r\n          value={title}\r\n          onChange={onChangeTitle}\r\n        />\r\n      </BSForm.Group>\r\n      <Button onClick={onSave} variant=\"secondary\" style={{marginRight: '5px'}}>\r\n        Save\r\n      </Button>\r\n      {selectedNote && (\r\n        <Button onClick={onDelete} variant=\"danger\">\r\n          Delete\r\n        </Button>\r\n      )}\r\n    </BSForm>\r\n  )\r\n}\r\n\r\n/*\r\nGör en likadan för body\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}