{"ast":null,"code":"function initializeNotes() {\n  // sets localstorage for the first time\n  localStorage.setItem('notes', JSON.stringify([])); // returns an array\n\n  return [];\n}\n\nexport function createNote(title, body) {\n  const notes = getNotes();\n  const newNote = {\n    id: Date.now(),\n    title,\n    body\n  };\n  notes.push(newNote);\n  console.log('about to save', notes);\n  const jsonNoteArray = JSON.stringify(notes);\n  localStorage.setItem('notes', jsonNoteArray);\n}\nexport function getNote(id) {\n  return notes.find(note => note.id === id);\n}\nexport function getNotes() {\n  let notes = localStorage.getItem('notes');\n\n  if (!notes) {\n    notes = initializeNotes();\n  }\n\n  const parsedNotes = JSON.parse(notes);\n  return parsedNotes;\n}\n/*  VIDEON LOCALSTORAGE 29 min in i videon\r\nexport function getNotes() {\r\n  const notes = localStorage.getItem('notes')\r\n  console.log('notes', notes)\r\n}\r\n\r\nexport function createNote(title, priority) {\r\n  const note = {title, priority}\r\n  const noteArray = [note]\r\n  console.log(noteArray)\r\n  localStorage.setItem('notes', noteArray)\r\n}\r\n\r\n*/\n\nexport function updateNote(id, title, body) {\n  const indexToUpdate = notes.findIndex(note => note.id === id);\n  const note = {\n    id,\n    title,\n    body\n  }; // removes old note\n\n  notes.splice(indexToUpdate, 1); // adds new note to start\n\n  notes.splice(0, 0, note);\n  return notes;\n}\nexport function deleteNote(id) {\n  const indexToDelete = notes.findIndex(note => note.id === id);\n  if (indexToDelete >= 0) notes.splice(indexToDelete, 1);\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Angelica/Desktop/react/notes/src/utils/noteHelpers.js"],"names":["initializeNotes","localStorage","setItem","JSON","stringify","createNote","title","body","notes","getNotes","newNote","id","Date","now","push","console","log","jsonNoteArray","getNote","find","note","getItem","parsedNotes","parse","updateNote","indexToUpdate","findIndex","splice","deleteNote","indexToDelete"],"mappings":"AAAA,SAASA,eAAT,GAA2B;AACzB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAe,EAAf,CAA9B,EAFyB,CAGzB;;AACA,SAAO,EAAP;AACD;;AAED,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AACtC,QAAMC,KAAK,GAAGC,QAAQ,EAAtB;AACA,QAAMC,OAAO,GAAG;AAACC,IAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAAL;AAAiBP,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,GAAhB;AACAC,EAAAA,KAAK,CAACM,IAAN,CAAWJ,OAAX;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BR,KAA7B;AACA,QAAMS,aAAa,GAAGd,IAAI,CAACC,SAAL,CAAeI,KAAf,CAAtB;AACAP,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8Be,aAA9B;AACD;AAED,OAAO,SAASC,OAAT,CAAiBP,EAAjB,EAAqB;AAC1B,SAAOH,KAAK,CAACW,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYA,EAAjC,CAAP;AACD;AAED,OAAO,SAASF,QAAT,GAAoB;AACzB,MAAID,KAAK,GAAGP,YAAY,CAACoB,OAAb,CAAqB,OAArB,CAAZ;;AACA,MAAI,CAACb,KAAL,EAAY;AACVA,IAAAA,KAAK,GAAGR,eAAe,EAAvB;AACD;;AACD,QAAMsB,WAAW,GAAGnB,IAAI,CAACoB,KAAL,CAAWf,KAAX,CAApB;AACA,SAAOc,WAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,UAAT,CAAoBb,EAApB,EAAwBL,KAAxB,EAA+BC,IAA/B,EAAqC;AAC1C,QAAMkB,aAAa,GAAGjB,KAAK,CAACkB,SAAN,CAAiBN,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYA,EAAtC,CAAtB;AACA,QAAMS,IAAI,GAAG;AACXT,IAAAA,EADW;AAEXL,IAAAA,KAFW;AAGXC,IAAAA;AAHW,GAAb,CAF0C,CAO1C;;AACAC,EAAAA,KAAK,CAACmB,MAAN,CAAaF,aAAb,EAA4B,CAA5B,EAR0C,CAS1C;;AACAjB,EAAAA,KAAK,CAACmB,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmBP,IAAnB;AACA,SAAOZ,KAAP;AACD;AAED,OAAO,SAASoB,UAAT,CAAoBjB,EAApB,EAAwB;AAC7B,QAAMkB,aAAa,GAAGrB,KAAK,CAACkB,SAAN,CAAiBN,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYA,EAAtC,CAAtB;AACA,MAAIkB,aAAa,IAAI,CAArB,EAAwBrB,KAAK,CAACmB,MAAN,CAAaE,aAAb,EAA4B,CAA5B;AACxB,SAAO,IAAP;AACD","sourcesContent":["function initializeNotes() {\r\n  // sets localstorage for the first time\r\n  localStorage.setItem('notes', JSON.stringify([]))\r\n  // returns an array\r\n  return []\r\n}\r\n\r\nexport function createNote(title, body) {\r\n  const notes = getNotes()\r\n  const newNote = {id: Date.now(), title, body}\r\n  notes.push(newNote)\r\n  console.log('about to save', notes)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n\r\nexport function getNote(id) {\r\n  return notes.find((note) => note.id === id)\r\n}\r\n\r\nexport function getNotes() {\r\n  let notes = localStorage.getItem('notes')\r\n  if (!notes) {\r\n    notes = initializeNotes()\r\n  }\r\n  const parsedNotes = JSON.parse(notes)\r\n  return parsedNotes\r\n}\r\n\r\n/*  VIDEON LOCALSTORAGE 29 min in i videon\r\nexport function getNotes() {\r\n  const notes = localStorage.getItem('notes')\r\n  console.log('notes', notes)\r\n}\r\n\r\nexport function createNote(title, priority) {\r\n  const note = {title, priority}\r\n  const noteArray = [note]\r\n  console.log(noteArray)\r\n  localStorage.setItem('notes', noteArray)\r\n}\r\n\r\n*/\r\n\r\nexport function updateNote(id, title, body) {\r\n  const indexToUpdate = notes.findIndex((note) => note.id === id)\r\n  const note = {\r\n    id,\r\n    title,\r\n    body,\r\n  }\r\n  // removes old note\r\n  notes.splice(indexToUpdate, 1)\r\n  // adds new note to start\r\n  notes.splice(0, 0, note)\r\n  return notes\r\n}\r\n\r\nexport function deleteNote(id) {\r\n  const indexToDelete = notes.findIndex((note) => note.id === id)\r\n  if (indexToDelete >= 0) notes.splice(indexToDelete, 1)\r\n  return true\r\n}\r\n"]},"metadata":{},"sourceType":"module"}