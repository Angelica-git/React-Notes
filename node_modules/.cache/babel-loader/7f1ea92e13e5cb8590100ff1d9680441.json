{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Angelica\\\\Desktop\\\\react\\\\notes\\\\src\\\\components\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport BSForm from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { createNote, getNotes, updateNote, deleteNote, archiveNote, unArchiveNote } from '../utils/noteHelpers';\nimport Alert from 'react-bootstrap/Alert';\n/*\r\nRequirements\r\n1. (DONE) write text in the field and store it as a new note\r\n2. (DONE) click on a note and displat the taxt in the fields.\r\n3. (DONE) edithe field filled with text from a selected note\r\n4. (DONE) Clicking save while on a selected note will update that selected note - how do ew make <List /> rerender when clicking save?\r\n*/\n\nconst STATUS_INITIAL_VALUE = '';\nexport default function Form({\n  selectedNote,\n  setSelectedNote,\n  refreshList,\n  isArchived\n}) {\n  _s();\n\n  console.log(selectedNote);\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n  const [status, setStatus] = useState(STATUS_INITIAL_VALUE);\n  const [variant, setVariant] = useState(''); //if (selectedNote) setTitle(selectedNote.title)\n\n  useEffect(() => {\n    if (selectedNote) return setTitle(selectedNote.title);\n    setTitle('') && setBody(selectedNote.body);\n    setBody('');\n  }, [selectedNote]);\n  useEffect(() => {\n    if (selectedNote) return setBody(selectedNote.body);\n    setBody('');\n  }, [selectedNote]);\n  useEffect(() => {\n    setTimeout(() => setStatus(STATUS_INITIAL_VALUE), 3000);\n  }, [status]);\n  useEffect(() => {\n    if (selectedNote) return setVariant('');\n  }, [variant]);\n\n  const onChangeTitle = e => setTitle(e.target.value);\n\n  const onChangeBody = e => setBody(e.target.value);\n\n  const onSave = e => {\n    e.preventDefault();\n    setTitle('');\n    setBody('');\n    setStatus('Saved!');\n    setVariant('success');\n\n    if (selectedNote) {\n      updateNote(selectedNote.id, title, body);\n      return refreshList();\n    }\n\n    console.log('Saving new note:', title);\n    createNote(title, body);\n    refreshList();\n    console.log(getNotes());\n  };\n\n  const onDelete = e => {\n    e.preventDefault();\n    const {\n      id\n    } = selectedNote;\n    deleteNote(id);\n    refreshList();\n    setTitle('');\n    setBody('');\n    setStatus('Deleted!');\n    setVariant('danger');\n  };\n\n  const handleArchive = e => {\n    e.preventDefault();\n\n    if (isArchived) {\n      unArchiveNote(selectedNote);\n    } else {\n      archiveNote(selectedNote);\n    }\n\n    refreshList();\n    setTitle('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(BSForm, {\n    children: [/*#__PURE__*/_jsxDEV(BSForm.Group, {\n      controlId: \"formGroupTitle\",\n      children: [/*#__PURE__*/_jsxDEV(BSForm.Label, {\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BSForm.Control, {\n        //value={selectedNote ? selectedNote.title : title} onChange={onChangeTitle}\n        value: title,\n        onChange: onChangeTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BSForm.Group, {\n      controlId: \"formGroupNote\",\n      children: [/*#__PURE__*/_jsxDEV(BSForm.Label, {\n        children: \"Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BSForm.Control, {\n        as: \"textarea\",\n        value: body,\n        onChange: onChangeBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onSave,\n      variant: \"success\",\n      style: styles.button,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), selectedNote && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onDelete,\n      variant: \"danger\",\n      style: styles.button,\n      children: [\"Delete \", /*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fas fa-trash-alt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), selectedNote && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleArchive,\n      variant: \"secondary\",\n      style: styles.button,\n      children: isArchived ? 'Un-archive' : 'Archive'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), status && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: variant,\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Form, \"c3ObiaoQQXok0oW3QhgBhO5wlDs=\");\n\n_c = Form;\nconst styles = {\n  button: {\n    marginRight: 10\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/Angelica/Desktop/react/notes/src/components/Form.js"],"names":["React","useState","useEffect","BSForm","Button","createNote","getNotes","updateNote","deleteNote","archiveNote","unArchiveNote","Alert","STATUS_INITIAL_VALUE","Form","selectedNote","setSelectedNote","refreshList","isArchived","console","log","title","setTitle","body","setBody","status","setStatus","variant","setVariant","setTimeout","onChangeTitle","e","target","value","onChangeBody","onSave","preventDefault","id","onDelete","handleArchive","styles","button","marginRight"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport BSForm from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {\r\n  createNote,\r\n  getNotes,\r\n  updateNote,\r\n  deleteNote,\r\n  archiveNote,\r\n  unArchiveNote,\r\n} from '../utils/noteHelpers'\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\n/*\r\nRequirements\r\n1. (DONE) write text in the field and store it as a new note\r\n2. (DONE) click on a note and displat the taxt in the fields.\r\n3. (DONE) edithe field filled with text from a selected note\r\n4. (DONE) Clicking save while on a selected note will update that selected note - how do ew make <List /> rerender when clicking save?\r\n*/\r\n\r\nconst STATUS_INITIAL_VALUE = ''\r\n\r\nexport default function Form({selectedNote, setSelectedNote, refreshList, isArchived}) {\r\n  console.log(selectedNote)\r\n  const [title, setTitle] = useState('')\r\n  const [body, setBody] = useState('')\r\n  const [status, setStatus] = useState(STATUS_INITIAL_VALUE)\r\n  const [variant, setVariant] = useState('')\r\n\r\n  //if (selectedNote) setTitle(selectedNote.title)\r\n\r\n  useEffect(() => {\r\n    if (selectedNote) return setTitle(selectedNote.title)\r\n    setTitle('') && setBody(selectedNote.body)\r\n    setBody('')\r\n  }, [selectedNote])\r\n\r\n  useEffect(() => {\r\n    if (selectedNote) return setBody(selectedNote.body)\r\n    setBody('')\r\n  }, [selectedNote])\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => setStatus(STATUS_INITIAL_VALUE), 3000)\r\n  }, [status])\r\n\r\n  useEffect(() => {\r\n    if (selectedNote) return setVariant('')\r\n  }, [variant])\r\n\r\n  const onChangeTitle = (e) => setTitle(e.target.value)\r\n  const onChangeBody = (e) => setBody(e.target.value)\r\n  const onSave = (e) => {\r\n    e.preventDefault()\r\n    setTitle('')\r\n    setBody('')\r\n    setStatus('Saved!')\r\n    setVariant('success')\r\n    if (selectedNote) {\r\n      updateNote(selectedNote.id, title, body)\r\n      return refreshList()\r\n    }\r\n\r\n    console.log('Saving new note:', title)\r\n    createNote(title, body)\r\n    refreshList()\r\n    console.log(getNotes())\r\n  }\r\n\r\n  const onDelete = (e) => {\r\n    e.preventDefault()\r\n    const {id} = selectedNote\r\n    deleteNote(id)\r\n    refreshList()\r\n    setTitle('')\r\n    setBody('')\r\n    setStatus('Deleted!')\r\n    setVariant('danger')\r\n  }\r\n\r\n  const handleArchive = (e) => {\r\n    e.preventDefault()\r\n    if (isArchived) {\r\n      unArchiveNote(selectedNote)\r\n    } else {\r\n      archiveNote(selectedNote)\r\n    }\r\n    refreshList()\r\n    setTitle('')\r\n  }\r\n\r\n  return (\r\n    <BSForm>\r\n      <BSForm.Group controlId=\"formGroupTitle\">\r\n        <BSForm.Label>Title</BSForm.Label>\r\n        <BSForm.Control //value={selectedNote ? selectedNote.title : title} onChange={onChangeTitle}\r\n          value={title}\r\n          onChange={onChangeTitle}\r\n        />\r\n      </BSForm.Group>\r\n      <BSForm.Group controlId=\"formGroupNote\">\r\n        <BSForm.Label>Note</BSForm.Label>\r\n        <BSForm.Control as=\"textarea\" value={body} onChange={onChangeBody} />\r\n      </BSForm.Group>\r\n      <Button onClick={onSave} variant=\"success\" style={styles.button}>\r\n        Save\r\n      </Button>\r\n      {selectedNote && (\r\n        <Button onClick={onDelete} variant=\"danger\" style={styles.button}>\r\n          Delete <i class=\"fas fa-trash-alt\"></i>\r\n        </Button>\r\n      )}\r\n      {selectedNote && (\r\n        <Button onClick={handleArchive} variant=\"secondary\" style={styles.button}>\r\n          {isArchived ? 'Un-archive' : 'Archive'}\r\n        </Button>\r\n      )}\r\n      {status && <Alert variant={variant}>{status}</Alert>}\r\n    </BSForm>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  button: {marginRight: 10},\r\n}\r\n"]},"metadata":{},"sourceType":"module"}