{"ast":null,"code":"function initializeNotes() {\n  // sets localstorage for the first time\n  localStorage.setItem('notes', JSON.stringify([])); // returns an array\n\n  return [];\n}\n\nexport function getNotes() {\n  let notes = localStorage.getItem('notes');\n\n  if (!notes) {\n    return initializeNotes();\n  }\n\n  const parsedNotes = JSON.parse(notes);\n  return parsedNotes;\n}\nexport function createNote(title, body) {\n  const notes = getNotes();\n  const newNote = {\n    id: Date.now(),\n    title,\n    body\n  };\n  notes.push(newNote);\n  console.log('about to save', notes);\n  const jsonNoteArray = JSON.stringify(notes);\n  localStorage.setItem('notes', jsonNoteArray);\n}\nexport function getNote(id) {\n  const notes = getNotes();\n  return notes.find(note => note.id === id);\n}\nexport function updateNote(id, title, body) {\n  const notes = getNotes();\n  const indexToUpdate = notes.findIndex(note => note.id === id);\n  const note = {\n    id,\n    title,\n    body\n  }; // removes old note\n\n  notes.splice(indexToUpdate, 1); // adds new note to start\n\n  notes.splice(0, 0, note);\n  const jsonNoteArray = JSON.stringify(notes);\n  localStorage.setItem('notes', jsonNoteArray);\n}\nexport function deleteNote(id) {\n  const notes = getNotes();\n  const indexToDelete = notes.findIndex(note => note.id === id);\n  if (indexToDelete >= 0) notes.splice(indexToDelete, 1);\n  const jsonNoteArray = JSON.stringify(notes);\n  localStorage.setItem('notes', jsonNoteArray);\n}","map":{"version":3,"sources":["C:/Users/Angelica/Desktop/react/notes/src/utils/noteHelpers.js"],"names":["initializeNotes","localStorage","setItem","JSON","stringify","getNotes","notes","getItem","parsedNotes","parse","createNote","title","body","newNote","id","Date","now","push","console","log","jsonNoteArray","getNote","find","note","updateNote","indexToUpdate","findIndex","splice","deleteNote","indexToDelete"],"mappings":"AAAA,SAASA,eAAT,GAA2B;AACzB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAe,EAAf,CAA9B,EAFyB,CAGzB;;AACA,SAAO,EAAP;AACD;;AAED,OAAO,SAASC,QAAT,GAAoB;AACzB,MAAIC,KAAK,GAAGL,YAAY,CAACM,OAAb,CAAqB,OAArB,CAAZ;;AACA,MAAI,CAACD,KAAL,EAAY;AACV,WAAON,eAAe,EAAtB;AACD;;AACD,QAAMQ,WAAW,GAAGL,IAAI,CAACM,KAAL,CAAWH,KAAX,CAApB;AACA,SAAOE,WAAP;AACD;AAED,OAAO,SAASE,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AACtC,QAAMN,KAAK,GAAGD,QAAQ,EAAtB;AACA,QAAMQ,OAAO,GAAG;AAACC,IAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAAL;AAAiBL,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,GAAhB;AACAN,EAAAA,KAAK,CAACW,IAAN,CAAWJ,OAAX;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bb,KAA7B;AACA,QAAMc,aAAa,GAAGjB,IAAI,CAACC,SAAL,CAAeE,KAAf,CAAtB;AACAL,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BkB,aAA9B;AACD;AAED,OAAO,SAASC,OAAT,CAAiBP,EAAjB,EAAqB;AAC1B,QAAMR,KAAK,GAAGD,QAAQ,EAAtB;AACA,SAAOC,KAAK,CAACgB,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYA,EAAjC,CAAP;AACD;AAED,OAAO,SAASU,UAAT,CAAoBV,EAApB,EAAwBH,KAAxB,EAA+BC,IAA/B,EAAqC;AAC1C,QAAMN,KAAK,GAAGD,QAAQ,EAAtB;AACA,QAAMoB,aAAa,GAAGnB,KAAK,CAACoB,SAAN,CAAiBH,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYA,EAAtC,CAAtB;AACA,QAAMS,IAAI,GAAG;AACXT,IAAAA,EADW;AAEXH,IAAAA,KAFW;AAGXC,IAAAA;AAHW,GAAb,CAH0C,CAQ1C;;AACAN,EAAAA,KAAK,CAACqB,MAAN,CAAaF,aAAb,EAA4B,CAA5B,EAT0C,CAU1C;;AACAnB,EAAAA,KAAK,CAACqB,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmBJ,IAAnB;AACA,QAAMH,aAAa,GAAGjB,IAAI,CAACC,SAAL,CAAeE,KAAf,CAAtB;AACAL,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BkB,aAA9B;AACD;AAED,OAAO,SAASQ,UAAT,CAAoBd,EAApB,EAAwB;AAC7B,QAAMR,KAAK,GAAGD,QAAQ,EAAtB;AACA,QAAMwB,aAAa,GAAGvB,KAAK,CAACoB,SAAN,CAAiBH,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYA,EAAtC,CAAtB;AACA,MAAIe,aAAa,IAAI,CAArB,EAAwBvB,KAAK,CAACqB,MAAN,CAAaE,aAAb,EAA4B,CAA5B;AACxB,QAAMT,aAAa,GAAGjB,IAAI,CAACC,SAAL,CAAeE,KAAf,CAAtB;AACAL,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BkB,aAA9B;AACD","sourcesContent":["function initializeNotes() {\r\n  // sets localstorage for the first time\r\n  localStorage.setItem('notes', JSON.stringify([]))\r\n  // returns an array\r\n  return []\r\n}\r\n\r\nexport function getNotes() {\r\n  let notes = localStorage.getItem('notes')\r\n  if (!notes) {\r\n    return initializeNotes()\r\n  }\r\n  const parsedNotes = JSON.parse(notes)\r\n  return parsedNotes\r\n}\r\n\r\nexport function createNote(title, body) {\r\n  const notes = getNotes()\r\n  const newNote = {id: Date.now(), title, body}\r\n  notes.push(newNote)\r\n  console.log('about to save', notes)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n\r\nexport function getNote(id) {\r\n  const notes = getNotes()\r\n  return notes.find((note) => note.id === id)\r\n}\r\n\r\nexport function updateNote(id, title, body) {\r\n  const notes = getNotes()\r\n  const indexToUpdate = notes.findIndex((note) => note.id === id)\r\n  const note = {\r\n    id,\r\n    title,\r\n    body,\r\n  }\r\n  // removes old note\r\n  notes.splice(indexToUpdate, 1)\r\n  // adds new note to start\r\n  notes.splice(0, 0, note)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n\r\nexport function deleteNote(id) {\r\n  const notes = getNotes()\r\n  const indexToDelete = notes.findIndex((note) => note.id === id)\r\n  if (indexToDelete >= 0) notes.splice(indexToDelete, 1)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}